// Script ex√©cut√© apr√®s chaque build pour v√©rifier les probl√®mes courants
const fetch = require('node-fetch');

exports.handler = async function(event, context) {
  console.log('üîç V√©rification post-d√©ploiement en cours...');
  
  const siteUrl = process.env.URL || 'http://localhost:8888';
  const results = {
    timestamp: new Date().toISOString(),
    checks: {
      homepage: { status: 'pending' },
      api: { status: 'pending' },
      env: { status: 'pending' }
    }
  };

  // V√©rification des variables d'environnement
  try {
    if (process.env.OPENAI_API_KEY) {
      results.checks.env.status = 'success';
      results.checks.env.message = 'Variables d\'environnement configur√©es';
    } else {
      results.checks.env.status = 'warning';
      results.checks.env.message = 'Cl√© API OpenAI manquante';
    }
  } catch (error) {
    results.checks.env.status = 'error';
    results.checks.env.message = 'Erreur lors de la v√©rification des variables d\'environnement';
  }

  // V√©rification de la page d'accueil
  try {
    const homepageResponse = await fetch(siteUrl);
    if (homepageResponse.ok) {
      results.checks.homepage.status = 'success';
      results.checks.homepage.message = `Page d'accueil accessible (${homepageResponse.status})`;
    } else {
      results.checks.homepage.status = 'error';
      results.checks.homepage.message = `Page d'accueil inaccessible (${homepageResponse.status})`;
    }
  } catch (error) {
    results.checks.homepage.status = 'error';
    results.checks.homepage.message = `Erreur lors de l'acc√®s √† la page d'accueil: ${error.message}`;
  }

  // V√©rification de l'API
  try {
    const apiResponse = await fetch(`${siteUrl}/api/health`);
    if (apiResponse.ok) {
      const apiData = await apiResponse.json();
      results.checks.api.status = 'success';
      results.checks.api.message = `API accessible (${apiData.status})`;
      results.checks.api.details = apiData;
    } else {
      results.checks.api.status = 'error';
      results.checks.api.message = `API inaccessible (${apiResponse.status})`;
    }
  } catch (error) {
    results.checks.api.status = 'error';
    results.checks.api.message = `Erreur lors de l'acc√®s √† l'API: ${error.message}`;
  }

  // R√©sum√© des r√©sultats
  const hasErrors = Object.values(results.checks).some(check => check.status === 'error');
  const hasWarnings = Object.values(results.checks).some(check => check.status === 'warning');
  
  if (hasErrors) {
    results.status = 'error';
    results.message = 'Des erreurs critiques ont √©t√© d√©tect√©es';
    console.log('‚ùå V√©rification post-d√©ploiement: √âCHEC');
  } else if (hasWarnings) {
    results.status = 'warning';
    results.message = 'Des avertissements ont √©t√© d√©tect√©s';
    console.log('‚ö†Ô∏è V√©rification post-d√©ploiement: AVERTISSEMENTS');
  } else {
    results.status = 'success';
    results.message = 'Toutes les v√©rifications ont r√©ussi';
    console.log('‚úÖ V√©rification post-d√©ploiement: SUCC√àS');
  }

  // Afficher les r√©sultats dans la console
  console.log(JSON.stringify(results, null, 2));

  return {
    statusCode: 200,
    body: JSON.stringify(results)
  };
}; 